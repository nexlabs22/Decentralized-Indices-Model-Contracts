{"abi":[{"type":"event","name":"Initialized","inputs":[{"name":"version","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":\"ReentrancyGuardUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@chainlink/=node_modules/@chainlink/\",\":@eth-optimism/=node_modules/@chainlink/contracts/node_modules/@eth-optimism/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@thirdweb-dev/=node_modules/@thirdweb-dev/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc721a-upgradeable/=node_modules/erc721a-upgradeable/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":sstore2/=node_modules/@thirdweb-dev/dynamic-contracts/lib/sstore2/\",\":uniswap-v3-periphery-0.8/=node_modules/uniswap-v3-periphery-0.8/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec9c629f63e66379f9c868a74f971064701cc6e30583872aa653f8b932518025\",\"dweb:/ipfs/QmY4MnZF2VMFwJkAwpdQwxEWA3KcGbNBKEmAVYePMVQWUR\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.7+commit.e28d00a7"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint8","name":"version","type":"uint8","indexed":false}],"type":"event","name":"Initialized","anonymous":false}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@chainlink/=node_modules/@chainlink/","@eth-optimism/=node_modules/@chainlink/contracts/node_modules/@eth-optimism/","@openzeppelin/=node_modules/@openzeppelin/","@thirdweb-dev/=node_modules/@thirdweb-dev/","@uniswap/=node_modules/@uniswap/","base64-sol/=node_modules/base64-sol/","ds-test/=lib/forge-std/lib/ds-test/src/","erc721a-upgradeable/=node_modules/erc721a-upgradeable/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/","sstore2/=node_modules/@thirdweb-dev/dynamic-contracts/lib/sstore2/","uniswap-v3-periphery-0.8/=node_modules/uniswap-v3-periphery-0.8/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":"ReentrancyGuardUpgradeable"},"evmVersion":"london","libraries":{}},"sources":{"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"keccak256":"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794","urls":["bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e","dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv"],"license":"MIT"},"node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"keccak256":"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0","urls":["bzz-raw://ec9c629f63e66379f9c868a74f971064701cc6e30583872aa653f8b932518025","dweb:/ipfs/QmY4MnZF2VMFwJkAwpdQwxEWA3KcGbNBKEmAVYePMVQWUR"],"license":"MIT"},"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"keccak256":"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422","urls":["bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b","dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","id":52147,"exportedSymbols":{"AddressUpgradeable":[53191],"Initializable":[51935],"ReentrancyGuardUpgradeable":[52146]},"nodeType":"SourceUnit","src":"112:3550:70","nodes":[{"id":52064,"nodeType":"PragmaDirective","src":"112:23:70","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":52065,"nodeType":"ImportDirective","src":"136:42:70","nodes":[],"absolutePath":"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","nameLocation":"-1:-1:-1","scope":52147,"sourceUnit":51936,"symbolAliases":[],"unitAlias":""},{"id":52146,"nodeType":"ContractDefinition","src":"931:2730:70","nodes":[{"id":52071,"nodeType":"VariableDeclaration","src":"1747:41:70","nodes":[],"constant":true,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1772:12:70","scope":52146,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52069,"name":"uint256","nodeType":"ElementaryTypeName","src":"1747:7:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":52070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1787:1:70","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"id":52074,"nodeType":"VariableDeclaration","src":"1794:37:70","nodes":[],"constant":true,"mutability":"constant","name":"_ENTERED","nameLocation":"1819:8:70","scope":52146,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52072,"name":"uint256","nodeType":"ElementaryTypeName","src":"1794:7:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":52073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1830:1:70","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"id":52076,"nodeType":"VariableDeclaration","src":"1838:23:70","nodes":[],"constant":false,"mutability":"mutable","name":"_status","nameLocation":"1854:7:70","scope":52146,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52075,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"id":52085,"nodeType":"FunctionDefinition","src":"1868:111:70","nodes":[],"body":{"id":52084,"nodeType":"Block","src":"1928:51:70","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":52081,"name":"__ReentrancyGuard_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52095,"src":"1938:32:70","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":52082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1938:34:70","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52083,"nodeType":"ExpressionStatement","src":"1938:34:70"}]},"implemented":true,"kind":"function","modifiers":[{"id":52079,"kind":"modifierInvocation","modifierName":{"id":52078,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":51880,"src":"1911:16:70"},"nodeType":"ModifierInvocation","src":"1911:16:70"}],"name":"__ReentrancyGuard_init","nameLocation":"1877:22:70","parameters":{"id":52077,"nodeType":"ParameterList","parameters":[],"src":"1899:2:70"},"returnParameters":{"id":52080,"nodeType":"ParameterList","parameters":[],"src":"1928:0:70"},"scope":52146,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":52095,"nodeType":"FunctionDefinition","src":"1985:109:70","nodes":[],"body":{"id":52094,"nodeType":"Block","src":"2055:39:70","nodes":[],"statements":[{"expression":{"id":52092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":52090,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52076,"src":"2065:7:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":52091,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52071,"src":"2075:12:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2065:22:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":52093,"nodeType":"ExpressionStatement","src":"2065:22:70"}]},"implemented":true,"kind":"function","modifiers":[{"id":52088,"kind":"modifierInvocation","modifierName":{"id":52087,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":51880,"src":"2038:16:70"},"nodeType":"ModifierInvocation","src":"2038:16:70"}],"name":"__ReentrancyGuard_init_unchained","nameLocation":"1994:32:70","parameters":{"id":52086,"nodeType":"ParameterList","parameters":[],"src":"2026:2:70"},"returnParameters":{"id":52089,"nodeType":"ParameterList","parameters":[],"src":"2055:0:70"},"scope":52146,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":52106,"nodeType":"ModifierDefinition","src":"2471:103:70","nodes":[],"body":{"id":52105,"nodeType":"Block","src":"2495:79:70","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":52098,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52121,"src":"2505:19:70","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":52099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2505:21:70","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52100,"nodeType":"ExpressionStatement","src":"2505:21:70"},{"id":52101,"nodeType":"PlaceholderStatement","src":"2536:1:70"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":52102,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52129,"src":"2547:18:70","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":52103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2547:20:70","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52104,"nodeType":"ExpressionStatement","src":"2547:20:70"}]},"documentation":{"id":52096,"nodeType":"StructuredDocumentation","src":"2100:366:70","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"name":"nonReentrant","nameLocation":"2480:12:70","parameters":{"id":52097,"nodeType":"ParameterList","parameters":[],"src":"2492:2:70"},"virtual":false,"visibility":"internal"},{"id":52121,"nodeType":"FunctionDefinition","src":"2580:287:70","nodes":[],"body":{"id":52120,"nodeType":"Block","src":"2619:248:70","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":52112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":52110,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52076,"src":"2712:7:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":52111,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52074,"src":"2723:8:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2712:19:70","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":52113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2733:33:70","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":52109,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2704:7:70","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":52114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2704:63:70","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52115,"nodeType":"ExpressionStatement","src":"2704:63:70"},{"expression":{"id":52118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":52116,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52076,"src":"2842:7:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":52117,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52074,"src":"2852:8:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2842:18:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":52119,"nodeType":"ExpressionStatement","src":"2842:18:70"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2589:19:70","parameters":{"id":52107,"nodeType":"ParameterList","parameters":[],"src":"2608:2:70"},"returnParameters":{"id":52108,"nodeType":"ParameterList","parameters":[],"src":"2619:0:70"},"scope":52146,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":52129,"nodeType":"FunctionDefinition","src":"2873:209:70","nodes":[],"body":{"id":52128,"nodeType":"Block","src":"2911:171:70","nodes":[],"statements":[{"expression":{"id":52126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":52124,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52076,"src":"3053:7:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":52125,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52071,"src":"3063:12:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3053:22:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":52127,"nodeType":"ExpressionStatement","src":"3053:22:70"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2882:18:70","parameters":{"id":52122,"nodeType":"ParameterList","parameters":[],"src":"2900:2:70"},"returnParameters":{"id":52123,"nodeType":"ParameterList","parameters":[],"src":"2911:0:70"},"scope":52146,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":52140,"nodeType":"FunctionDefinition","src":"3261:107:70","nodes":[],"body":{"id":52139,"nodeType":"Block","src":"3325:43:70","nodes":[],"statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":52137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":52135,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52076,"src":"3342:7:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":52136,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52074,"src":"3353:8:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3342:19:70","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":52134,"id":52138,"nodeType":"Return","src":"3335:26:70"}]},"documentation":{"id":52130,"nodeType":"StructuredDocumentation","src":"3088:168:70","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3270:23:70","parameters":{"id":52131,"nodeType":"ParameterList","parameters":[],"src":"3293:2:70"},"returnParameters":{"id":52134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52133,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52140,"src":"3319:4:70","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":52132,"name":"bool","nodeType":"ElementaryTypeName","src":"3319:4:70","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3318:6:70"},"scope":52146,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":52145,"nodeType":"VariableDeclaration","src":"3633:25:70","nodes":[],"constant":false,"documentation":{"id":52141,"nodeType":"StructuredDocumentation","src":"3374:254:70","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"mutability":"mutable","name":"__gap","nameLocation":"3653:5:70","scope":52146,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":52142,"name":"uint256","nodeType":"ElementaryTypeName","src":"3633:7:70","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":52144,"length":{"hexValue":"3439","id":52143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3641:2:70","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3633:11:70","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"abstract":true,"baseContracts":[{"baseName":{"id":52067,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":51935,"src":"979:13:70"},"id":52068,"nodeType":"InheritanceSpecifier","src":"979:13:70"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":52066,"nodeType":"StructuredDocumentation","src":"180:750:70","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"linearizedBaseContracts":[52146,51935],"name":"ReentrancyGuardUpgradeable","nameLocation":"949:26:70","scope":52147,"usedErrors":[]}],"license":"MIT"},"id":70}